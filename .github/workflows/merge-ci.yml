name: Merge CI

on:
  push:
    branches:
      - main

permissions:
  contents: write  # Needed for tagging the commit

jobs:
  extract_branch_name:
    name: Extract Branch Name
    runs-on: ubuntu-latest
    outputs:
      branch: ${{ steps.extract.outputs.branch }}
    steps:
    - name: Extract Branch Name
      id: extract
      run: |
        if [[ "${{ github.event_name }}" == "pull_request" ]]; then
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
        else
          BRANCH_NAME=$(git log -1 --pretty=%D | grep -oE 'origin/[^,]+' | cut -d'/' -f2-)
        fi
        echo "Extracted branch name: $BRANCH_NAME"
        echo "branch=$BRANCH_NAME" >> $GITHUB_OUTPUT

  detect_deployment_type:
    name: Detect Deployment Type
    runs-on: ubuntu-latest
    needs: extract_branch_name  # Ensure we extract the branch first
    outputs:
      deployment_type: ${{ steps.set_deployment_type.outputs.deployment_type }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Detect Deployment Type from Merged Branch
        id: set_deployment_type
        run: |
          # Fetch the branch name that was merged
          BRANCH_NAME="${{ needs.extract_branch_name.outputs.branch }}"
          echo "Merged branch: $BRANCH_NAME"

          if [[ "$BRANCH_NAME" == feature/ota/* ]]; then
            echo "Deployment type: OTA Update"
            echo "deployment_type=ota" >> $GITHUB_ENV
            echo "deployment_type=ota" >> $GITHUB_OUTPUT
          elif [[ "$BRANCH_NAME" == feature/build/* ]]; then
            echo "Deployment type: Full Build"
            echo "deployment_type=build" >> $GITHUB_ENV
            echo "deployment_type=build" >> $GITHUB_OUTPUT
          else
            echo "No deployment required."
            echo "deployment_type=none" >> $GITHUB_ENV
            echo "deployment_type=none" >> $GITHUB_OUTPUT
          fi

  deploy_ota:
    name: Deploy OTA Update
    needs: detect_deployment_type
    runs-on: ubuntu-latest
    if: needs.detect_deployment_type.outputs.deployment_type == 'ota'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: source/yarn.lock

      - name: Install dependencies
        working-directory: source
        run: yarn install --frozen-lockfile

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Deploy OTA Update
        working-directory: source
        run: |
          UPDATE_URL=$(eas update --auto --branch main | grep -o 'https://expo.dev/.*')
          echo "UPDATE_URL=$UPDATE_URL" >> $GITHUB_ENV

      - name: Install QR Code Generator
        run: sudo apt-get install -y qrencode

      - name: Generate QR Code for Expo Go
        run: |
          echo "Scan this QR code to test: $UPDATE_URL"
          echo "$UPDATE_URL" | qrencode -o qrcode.png

      - name: Upload QR Code
        uses: actions/upload-artifact@v4
        with:
          name: expo-qr-code
          path: qrcode.png

  deploy_build:
    name: Deploy Full Build
    needs: detect_deployment_type
    runs-on: ubuntu-latest
    if: needs.detect_deployment_type.outputs.deployment_type == 'build'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: yarn
          cache-dependency-path: source/yarn.lock

      - name: Install dependencies
        working-directory: source
        run: yarn install --frozen-lockfile

      - name: Setup Expo
        uses: expo/expo-github-action@v8
        with:
          eas-version: latest
          token: ${{ secrets.EXPO_TOKEN }}

      - name: Build App
        working-directory: source
        run: |
          BUILD_URL=$(eas build --platform all --profile preview --non-interactive | grep -o 'https://expo.dev/.*')
          echo "BUILD_URL=$BUILD_URL" >> $GITHUB_ENV

      - name: Install QR Code Generator
        run: sudo apt-get install -y qrencode

      - name: Generate QR Code for Expo Go
        run: |
          echo "Scan this QR code to test: $BUILD_URL"
          echo "$BUILD_URL" | qrencode -o qrcode.png

      - name: Upload QR Code
        uses: actions/upload-artifact@v4
        with:
          name: expo-qr-code
          path: qrcode.png
